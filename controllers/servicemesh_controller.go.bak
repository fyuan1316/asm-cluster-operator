/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	"context"
	"fmt"
	"gomod.alauda.cn/asm/cluster-operator/api/clusterRegister"
	"gomod.alauda.cn/asm/cluster-operator/pkg/lib"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"

	"github.com/go-logr/logr"
	errordef "gomod.alauda.cn/asm/cluster-operator/pkg/error"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"

	operatorv1alpha1 "gomod.alauda.cn/asm/cluster-operator/api/v1alpha1"
)

// ServiceMeshReconciler reconciles a ServiceMesh object
type ServiceMeshReconciler struct {
	client.Client
	Log    logr.Logger
	Scheme *runtime.Scheme
}

// +kubebuilder:rbac:groups=operator.asm.alauda.io,resources=servicemeshes,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=operator.asm.alauda.io,resources=servicemeshes/status,verbs=get;update;patch

func (r *ServiceMeshReconciler) Reconcile(req ctrl.Request) (ctrl.Result, error) {
	var err error
	var rt ctrl.Result
	_ = context.Background()
	log := r.Log.WithValues("servicemesh", req.NamespacedName)
	log.Info(fmt.Sprintf("Starting reconcile loop for %v", req.NamespacedName))
	defer log.Info(fmt.Sprintf("Finish reconcile loop for %v", req.NamespacedName))
	defer func() {
		//if any := recover(); any != nil {
		//	log.DPanicf("ClusterModule Reconcile '%s' recover from panic: %v", req.Name, any)
		//}
		if err != nil {
			if err != errordef.ErrNeedRetry {
				log.WithValues("reconcile '%s' error: %v", req.Name, err)
			}
			err = nil
			rt.RequeueAfter = errordef.ReconcileAfterDuration
		} else {
			rt.RequeueAfter = errordef.HealthCheckReconcileAfterDuration
		}
	}()

	mesh := &operatorv1alpha1.ServiceMesh{}
	if err := r.Get(context.Background(), req.NamespacedName, mesh); err != nil {
		if errors.IsNotFound(err) {
			return rt, nil
		}
		return rt, err
	}

	meshSpec, err := mesh.ToServiceMeshType()
	if err != nil {
		fmt.Println(err)
	}
	_ = meshSpec
	//fmt.Printf("%v", meshSpec)
	token := "1jE7sxCaTX0ssUYPajHnfUsF3ge" //mesh.Spec.GlobalConfig.Token
	cfg, err := lib.RestConfigOfCluster(&clusterRegister.Cluster{
		Spec: clusterRegister.ClusterSpec{
			KubernetesAPIEndpoints: clusterRegister.KubernetesAPIEndpoints{
				ServerEndpoints: []clusterRegister.ServerAddressByClientCIDR{
					{ServerAddress: mesh.Spec.GlobalConfig.ServerAddress}},
			},
		},
	}, token)
	if err != nil {
		fmt.Println(err)
	}
	client, err := kubernetes.NewForConfig(cfg)
	if err != nil {
		fmt.Println(err)
	}
	svc, err := client.CoreV1().Services("cpaas-system").Get(context.Background(), "hermes", metav1.GetOptions{})
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(svc.ResourceVersion)

	return ctrl.Result{}, nil
}

func (r *ServiceMeshReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&operatorv1alpha1.ServiceMesh{}).
		Complete(r)
}
